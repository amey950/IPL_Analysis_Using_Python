
1) total matches : 816

print(df_p['id'].nunique())
----------------------------------------------------------------------------------------------------
2) find the unique teams which are present in data set

print(df_p['batting_team'].unique())
----------------------------------------------------------------------------------------------------
3) create special different data frame containing boundry runs only

df_p['batsman_runs'].between(4,6)
----------------------------------------------------------------------------------------------------
4) how many boundry i.e 4s and 6s are there in entire data set

df_p['batsman_runs'].between(4,6)
df_p.shape[0]
----------------------------------------------------------------------------------------------------
5) give the top 5 batsman and their total boundry count

aa = df_p[df_p['batsman_runs'].between(4,6)]
aa.value_counts('batsman').head(5)

CH Gayle     733
V Kohli      706
DA Warner    706
S Dhawan     702
SK Raina     688

----------------------------------------------------------------------------------------------------
6) find the team which has scored maximum boundries and fetch top 5

aa = df_p[df_p['batsman_runs'].between(4,6)]
aa.value_counts('batting_team').head(5)

Mumbai Indians                 4045
Royal Challengers Bangalore    3734
Kings XI Punjab                3705
Kolkata Knight Riders          3648
Chennai Super Kings            3429
----------------------------------------------------------------------------------------------------
7)find the top 10 batsman with highest runs

aa = df_p.groupby('batsman')['batsman_runs'].sum()
aa.sort_values(ascending = False).head(10)
----------------------------------------------------------------------------------------------------
8) give the top 5 bowlers with highrest wickets

aa = df_p[df_p['is_wicket'] == 1]
aa.value_counts('bowler').head(5)
----------------------------------------------------------------------------------------------------
9) give the most expensive bowlers in terms of boundries

aa = df_p[df_p['batsman_runs'].between(4,6)]
bb = aa.value_counts('bowler') ;
bb

UT Yadav            510
PP Chawla           498
DJ Bravo            444
P Kumar             443
Harbhajan Singh     431
----------------------------------------------------------------------------------------------------
10) different types of ways batsman got out

a = df_p.value_counts('dismissal_kind')
a.head(5)

caught                     5743
bowled                     1700
run out                     893
lbw                         571
stumped                     294
----------------------------------------------------------------------------------------------------
11) FIND THE 3 TEAMS AGAINST WHICH VIRAT KOHLI HAS SCORED HIGHEST RUNS

df_p[df_p['batsman'] == 'V Kohli']
df_p.groupby('bowling_team')['batsman_runs'].sum().sort_values(ascending = False).head(3)

Mumbai Indians                 29442
Royal Challengers Bangalore    28926
Kings XI Punjab                28860

----------------------------------------------------------------------------------------------------

12) FIND THE PLAYERS WHO HAVE SCORED CENTURY ALSO POST THE SCORES

a = df_p.groupby(['id','batsman','date'])['batsman_runs'].sum()
a[a.values >= 100].sort_values(ascending =  False)

----------------------------------------------------------------------------------------------------

13) FIND THE TOP 5 BOWLERS WHO HAVE GIVEN MOST EXTRA RUNS

a = df_p[df_p['extra_runs'].between (1,6)]
a.value_counts('bowler').head(5)

SL Malinga    220
UT Yadav      185
P Kumar       185
DJ Bravo      185
B Kumar       166
----------------------------------------------------------------------------------------------------

Q) WHICH TEAM HAS GIVEN HIGHEST NUMBER OF BOUNDRIES GIVE TOP 5 TEAMS AND THEIR COUNT OF BOUNDRIES 

a = df_p[(df_p['total_runs'] == 6 )| (df_p['total_runs'] == 4)]
a.value_counts('bowling_team').head(5)

Kings XI Punjab                3832
Mumbai Indians                 3786
Royal Challengers Bangalore    3761
Kolkata Knight Riders          3605
Chennai Super Kings            3306

----------------------------------------------------------------------------------------------------

Q) FIND THE NUMBER OF GAMES PLAYED BY CSK I.E. , Chennai Super Kings

a = df_p[df_p['batting_team'] == 'Chennai Super Kings']
a['id'].nunique()

ans : 178 games
----------------------------------------------------------------------------------------------------

Q) FIND NAMES OF ALL THE TEAMS PLAYING IN THE IPL 

a = df_p['batting_team']
a.unique()

----------------------------------------------------------------------------------------------------

Q) TOP 10 INNINGS OF VIRAT KOHLI , SCORE AND BOWLING TEAM 

a = df_p[df_p['batsman'] == 'V Kohli']
b = a.groupby(['id', 'batsman', 'bowling_team'])['batsman_runs'].sum().sort_values(ascending = False).head(10)

980999   V Kohli  Kings XI Punjab            113
980987   V Kohli  Gujarat Lions              109
980969   V Kohli  Rising Pune Supergiants    108
980937   V Kohli  Gujarat Lions              100
1178410  V Kohli  Kolkata Knight Riders      100
598054   V Kohli  Delhi Daredevils            99
598048   V Kohli  Sunrisers Hyderabad         93
1136574  V Kohli  Mumbai Indians              92
1216525  V Kohli  Chennai Super Kings         90
1175372  V Kohli  Kolkata Knight Riders       84

----------------------------------------------------------------------------------------------------

Q) FIND THE AVERAGE OF V KOHLI

aa = df_p[df_p['batsman'] == 'V Kohli']
matches = aa['id'].nunique()
runs = aa['batsman_runs'].sum()

print(runs/matches)   /* IT IS 31.5 */ 
----------------------------------------------------------------------------------------------------

Q) FIND THE MEDIAN  OF THE V KOHLI'S RUNS

import numpy as np
a = df_p[df_p['batsman'] == 'V Kohli']       /* masking aka filtering */ 
b = a.groupby(['id','batsman'])['batsman_runs'].sum()    /* grouping by */ 
z = b.values               /* series data type and considering values */
print(np.median(z))     /* printing the median */ 

----------------------------------------------------------------------------------------------------

Q) WHICH BOWLING TEAM HAS GIVEN HIGHEST 6s PICK TOP 5

aa = df_p[(df_p['batsman_runs'] == 6) | (df_p['batsman_runs'] == 4)]
aa.value_counts('bowling_team').head(5)

Kings XI Punjab                3807
Mumbai Indians                 3752
Royal Challengers Bangalore    3729
Kolkata Knight Riders          3577
Chennai Super Kings            3283

----------------------------------------------------------------------------------------------------
Q) FIND THE TOTAL RUNS SCORED BY  V Kohli

aa = df_p.groupby(['batsman'])['batsman_runs'].sum().sort_values(ascending = False)
aa['V Kohli']

/* here in 2nd line you can replace name of any player and answer will be present */

--------------------------------------------------------------------------------------

Q)  WRITE A CODE TO FIND THE HOW MANY TIME KOHLI HAS SCORED MORE THAN 90 RUNS

aa = df_p.groupby(['batsman','id'])['batsman_runs'].sum()
k = aa['V Kohli']
k[k.values > 90].count()

/* HERE WE CAN CHANGE THE NAME OF BATSMAN AND CHANGE THE SCORE , IT IS JUST REPLACEMENT IN ABOVE CODE */ 

-------------------------------------------------------------------------------------

Q) WRITE A QUERY TO FIND BATSMAN AND NUMBER OF CENTURIES SCORED.

a = df_p.groupby(['id','batsman','date'])['batsman_runs'].sum()
b = a[a.values >= 100].sort_values(ascending =  False)
b.to_frame(name=None).value_counts('batsman').head(5)

CH Gayle            6
V Kohli             5
DA Warner           4
SR Watson           4
AB de Villiers      3

-------------------------------------------------------------------------------------

Q) WRITE A QUERY TO FIND THE 5 TYPES OF GETTING OUT

df_p['dismissal_type].value_counts().head(5)
-------------------------------------------------------------------------------------
Q) FIND THE TOP 5 PLAYERS WHO GOT OUT BY RUN-OUT 

df_p[df_p['dismissal_kind'] == 'run out'].value_counts('batsman').head(10)

MS Dhoni      22
RG Sharma     20
KD Karthik    17
S Dhawan      15
V Kohli       15
-------------------------------------------------------------------------------------
